import{c as p,a as k,b as w,S as A,d as S}from"./staking.stakedao.service-87aa0857.js";import{B as m,s as b,a5 as r,d,aO as C,a2 as x,b as h,ar as P,as as T,a4 as I}from"./index-614b6d1c.js";import{c as R}from"./CvxAssetStakingService-f8fb6638.js";import{c as y}from"./CurvePool-852682be.js";import{g as V}from"./convexUtils-7f054622.js";(function(){try{var i=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},e=new Error().stack;e&&(i._sentryDebugIds=i._sentryDebugIds||{},i._sentryDebugIds[e]="b89cc648-2d29-4a36-803c-ec62bb83225b",i._sentryDebugIdIdentifier="sentry-dbid-b89cc648-2d29-4a36-803c-ec62bb83225b")}catch{}})();const _="hh-sol-artifact-1",N="CvxStakingProcessableRewards",L="contracts/ChainView/CvxStakingProcessableRewards.sol",O=[{inputs:[{internalType:"contract ICvxStakingPositionService",name:"cvgCvxStakingService",type:"address"},{internalType:"contract ICvgCVX",name:"cvgCVX",type:"address"},{internalType:"contract ICvxStakingPositionService[]",name:"cvxStakings",type:"address[]"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{components:[{internalType:"address",name:"stakingContract",type:"address"},{internalType:"string",name:"stakingName",type:"string"},{internalType:"bool",name:"isCvxProcessed",type:"bool"},{components:[{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"totalProcessable",type:"uint256"},{internalType:"uint256",name:"processorAmount",type:"uint256"},{internalType:"uint256",name:"podAmount",type:"uint256"},{internalType:"uint256",name:"stakerAmount",type:"uint256"}],internalType:"struct TokenAmountsProcessed[]",name:"tokenAmounts",type:"tuple[]"}],internalType:"struct CvxHarvesterInfo[]",name:"harvesterInfos",type:"tuple[]"}],name:"CvxStakingProcessableRewardsErr",type:"error"}],j="",B="0x60806040525f80fdfea26469706673582212203d1dc0a3bf6e16d7da400c098ad9acbc0b2b859fdb61a405817dd9be5f98e05064736f6c63430008180033",E={},H={},l={_format:_,contractName:N,sourceName:L,abi:O,bytecode:j,deployedBytecode:B,linkReferences:E,deployedLinkReferences:H};class D{bcService=new m;getCvxCvgCvxRatio=async e=>{const t=await b.getStaticData(),a=new r(t?.convex.cvgCvxCvx1PoolContract,y.abi,await this.bcService.getStaticProvider());if(e===0n)return 0;const s=await a.get_dy(0,1,e);return d(s,18)/d(e,18)};getDy=async(e,t)=>t===0n?0n:await new r(e,y.abi,await this.bcService.getStaticProvider()).get_dy(0,1,t);async getStakingPositions(e){const t=await this.getStakingPositionId(e);return await this._getTokenData(t)}async getStakingPositionId(e){if(!e)return[];const t=await b.getStaticData();return(await new r(t.convex.cvxStakingPositionManager,C.abi,await this.bcService.getStaticProvider()).getTokenIdsAndStakingContracts(e)).map(s=>s.toObject())}async doConvert(e,t,a){const s=await b.getStaticData();return await new r(s.stakedao.cvgSDT,p.abi,a).mint(e,t)}async doStakeGauge(e,t,a,s){return await new r(t,k.abi,s).deposit(e,a,x)}async doConvertAndStake(e,t,a){const s=await b.getStaticData();return await new r(s?.stakedao.sdtUtilities,w.abi,a).convertAndStakeCvgSdt(e,0,t,t)}async doUnStake(e,t,a,s){return await new r(t,k.abi,s).withdraw(e,a)}processStakingTotals(e,t){const a={contracts:{},cvgSdt:{tvl:0},sd:{tvl:0},cvxAsset:{tvl:0},total:{tvl:0},isInit:!1};if(!e?.stakings||!t)return a;const s=t[e.cvgSdt.cvgAsset.tokenAddress];a.cvgSdt.tvl=s*d(e.cvgSdt.nextTotal,18),a.total.tvl=a.cvgSdt.tvl;const n=(f,c)=>{a.contracts[c.stakingAddress]===void 0&&(a.contracts[c.stakingAddress]={tvl:0});const o=a.contracts[c.stakingAddress],u=t[c.gaugeAsset.tokenAddress],g=d(c.nextTotal,c.gaugeAsset.decimals)*u;o.tvl=isNaN(g)?0:g,a[f].tvl+=o.tvl,a.contracts[c.stakingAddress]={tvl:o.tvl,token:c.gaugeAsset.name}};return Object.values(e?.stakings?.lps).forEach(f=>{n("cvxAsset",f)}),Object.values(e?.stakings?.sdAssets).forEach(f=>{n("sd",f)}),{...a,isInit:!0}}processUserTotals(e,t,a){const s={contracts:{},cvgSdt:{amount:0,count:0},sd:{amount:0,count:0},cvxAsset:{amount:0,count:0},total:{amount:0,count:0}};return!e?.stakings||!t||Object.entries(t).forEach(([n,f])=>{Object.values(f).forEach(c=>{const{asset:o,type:u}=this._getStakingAssetFormGlobalData(e,n);if(!o)return;const g=a&&a[o.tokenAddress]||0,v=d(c.nextToken,o.decimals)*g;s.contracts[n]===void 0&&(s.contracts[n]={amount:0,count:0}),s.contracts[n].amount+=v,s.contracts[n].count+=1,s[u].amount+=v,s[u].count+=1,s.total.amount+=v,s.total.count+=1})}),s}async getStakingPrices(e){if(!e||e.loading||e.error)return;const t=[e.cvgSdt.cvgAsset.tokenAddress];return Object.values(e.stakings.lps).forEach(a=>{t.push(a.gaugeAsset.tokenAddress)}),Object.values(e.stakings.sdAssets).forEach(a=>{t.push(a.gaugeAsset.tokenAddress)}),h.getPrices(t)}async getVeSdtInfo(){const e=await b.getStaticData(),t=new r(e?.stakedao.sdtVeBoost,A.abi,await this.bcService.getStaticProvider()),a=[t.balanceOf(e.stakedao.veSdtMultisig),t.received_balance(e.stakedao.veSdtMultisig),t.totalSupply()],s=await Promise.all(a),[n,f,c]=s.map(o=>d(o,18));return{balance:n,delegatedBalance:f,totalSupply:c}}async _getTokenData(e){const t=await b.getStaticData();return(await new r(t?.stakedao?.sdtStakingViewer,S.abi,await this.bcService.getStaticProvider()).getTokenViewSdtStaking(e)).reduce((n,f)=>(n[f.stakingContract]=n[f.stakingContract]||{},n[f.stakingContract][Number(f.tokenId)]={actualToken:f.actualToken,previousToken:f.previousToken,nextToken:f.nextToken,isCvgSdt:f.stakingContract===t?.stakedao?.cvgSdtStaking},n),{})}_getStakingAssetFormGlobalData(e,t){if(!(e===void 0||e.loading))return e.cvgSdt.cvgAssetStaking===t?{asset:e.cvgSdt.cvgAsset,type:"cvgSdt"}:e.stakings.sdAssets[t]?{asset:e.stakings.sdAssets[t].gaugeAsset,type:"sd"}:e.stakings.lps[t]?{asset:e.stakings.lps[t].gaugeAsset,type:"cvxAsset"}:{asset:void 0,type:void 0}}async getCvgSdtTotalSupply(){const e=await b.getStaticData();return await new r(e.stakedao.cvgSDT,p.abi,await this.bcService.getStaticProvider()).totalSupply()}sortList(e,t){return(a,s)=>{switch(e){case"token":return(a?.stakingName?.toUpperCase()<s?.stakingName?.toUpperCase()?1:-1)*t;case"apr":return(a?.apr?.projectedApr?.totalApr-s?.apr?.projectedApr?.totalApr)*t;case"tvl":return(a?.tvl?.tvl-s?.tvl?.tvl)*t;case"userDeposit":return((a?.userDeposit?.amount?a.userDeposit.amount:0)-(s?.userDeposit?.amount?s.userDeposit.amount:0))*t;case"boost":{const n=a?.apr?.boost?Object.values(a?.apr?.boost).reduce((c,o)=>c+(typeof o=="string"?0:o),0):0,f=s?.apr?.boost?Object.values(s?.apr?.boost).reduce((c,o)=>c+(typeof o=="string"?0:o),0):0;return(n-f)*t}case"userClaimable":return(a.userClaimable-s.userClaimable)*t;default:return 0}}}filterListByAddress(e){return t=>[t.stakingAddress?.tokenAddress,t.gaugeAsset?.tokenAddress,t.lpAsset?.tokenAddress,t.sdAsset?.tokenAddress,t.asset?.tokenAddress].includes(e)}filterListByTokenName(e){return t=>[t.stakingName?.toLowerCase(),t.gaugeAsset?.token?.toLowerCase(),t.lpAsset?.token?.toLowerCase(),t.sdAsset?.token?.toLowerCase(),t.asset?.token?.toLowerCase()].some(a=>a?.includes(e?.toLowerCase()))}async getTvlForaContract(e,t){const a=await b.getStaticData(),s=new r(a.stakedao.sdtStakingViewer,S.abi,await this.bcService.getStaticProvider());if(e==="cvgSdt")return(await s.getGlobalViewCvgSdtStaking(a.stakedao.cvgSdtStaking))?.toObject()?.nextTotal;if(e==="sd")return(await s.getGlobalViewSdAssetStaking([t]))?.toArray()?.at(0)?.nextTotal;if(e==="cvxAsset")return(await s.getGlobalViewLpAssetStaking([t]))?.toArray()?.at(0)?.nextTotal}async getStakeDaoAprs(){try{const e=await fetch("https://api.cvg.finance//stake-dao/aprs");if(e?.status===200)return await e.json()}catch(e){return console.error(e),{}}}async _getRawHarvesterInfo(){const e=(await b.getStaticData()).convex,t=[e.cvxCrvStakingPositionService,e.cvxPrismaStakingPositionService,e.cvxFxnStakingPositionService],a=await this.bcService.getStaticProvider(),s=new P(l.abi),f=await new T(l.abi,l.bytecode).getDeployTransaction(e.cvgCvxStakingPositionService,e.cvgCVX,t);return await this.bcService.excuteChainView(a,f,s)}async doProcessReward(e,t){return await new r(e,R.abi,t).processCvxRewards()}async getHarvesterInfo(){let e=await this._getRawHarvesterInfo();return e=await this._hydrateHarvestRewardList(e),e?.map(a=>({...V(a.stakingName)||{},...a}))||[]}async _hydrateHarvestRewardList(e){let t=e.filter(a=>a.tokenAmounts.some(s=>s.totalProcessable>0n)&&!a.isCvxProcessed);return await Promise.all(t.map(this._hydrateHarvestRewardInfo))}async _hydrateHarvestRewardInfo(e){e.tokenAmounts=e.tokenAmounts?.length?e.tokenAmounts.filter(t=>t.totalProcessable>0n):[];for(let t=0;t<e.tokenAmounts.length;t++){const a=await I.getErc20INfo(e.tokenAmounts[t].token);e.tokenAmounts[t]={...a,amount:e.tokenAmounts[t].totalProcessable,amountToHarvest:e.tokenAmounts[t].processorAmount}}return e}}const X=new D;export{X as s};
